//
// RISu64
// Copyright 2022 Wenting Zhang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
`timescale 1ns / 1ps
`include "defines.vh"
`default_nettype none
<% from risupylib import * %>

module cpu(
    input  wire         clk,
    input  wire         rst,
    // Instruction memory
    <% gen_port("im", romem_if_t, reg=False) %>
    output wire         im_invalidate_req,
    input  wire         im_invalidate_resp,
    // Data memory
    <% gen_port("dm", rwmem_if_t, reg=False) %>
    output wire         dm_flush_req,
    input  wire         dm_flush_resp,
    // From CLINT
    input  wire         extint_software,
    input  wire         extint_timer,
    // From PLIC
    input  wire         extint_external
);
    parameter HARTID = 64'd0;

    // Unaligned LS
    wire        lsp_unaligned_load;
    wire        lsp_unaligned_store;
    wire [63:0] lsp_unaligned_epc;

    // Page fault
    wire        mmu_load_page_fault;
    wire        mmu_store_page_fault;

    // Register file
    <% gen_wire("rf", rf_rd_t, count=REG_RD_PORTS) %>
    <% gen_wire("rf", rf_wr_t, count=REG_WR_PORTS) %>

    rf rf(
        .clk(clk),
        .rst(rst),
        <% gen_connect("rf", rf_rd_t, count=REG_RD_PORTS) %>
        <% gen_connect("rf", rf_wr_t, count=REG_WR_PORTS, last_comma=False) %>
    );

    // IF stage
    <% gen_wire("if", romem_if_t) %>
    wire        if_resp_page_fault;
    <% gen_wire("if_dec1", if_dec_t) %>
    wire        if_dec1_valid;
    <% gen_wire("if_dec0", if_dec_t) %>
    wire        if_dec0_valid;
    wire        if_dec_ready;
    <% gen_wire("ip_if", ip_if_t) %>
    wire        ix_if_pc_override;
    wire [63:0] ix_if_new_pc;
    wire        trap_if_pc_override;
    wire [63:0] trap_if_new_pc;
    wire        if_pc_override;
    wire [63:0] if_new_pc;
    wire        pipe_flush;

    assign if_pc_override = ip_if_pc_override || ix_if_pc_override ||
            trap_if_pc_override;
    assign if_new_pc = trap_if_pc_override ? trap_if_new_pc :
            ix_if_pc_override ? ix_if_new_pc : ip_if_new_pc;
    assign pipe_flush = if_pc_override || lsp_unaligned_load ||
            lsp_unaligned_store || mmu_load_page_fault || mmu_store_page_fault;

    ifp ifp (
        .clk(clk),
        .rst(rst),
        // I-mem interface
        <% gen_connect("if_im", romem_if_t, "if") %>
        .if_im_resp_page_fault(if_resp_page_fault),
        // Decoder interface
        <% gen_connect("if_dec1", if_dec_t) %>
        .if_dec1_valid(if_dec1_valid),
        <% gen_connect("if_dec0", if_dec_t) %>
        .if_dec0_valid(if_dec0_valid),
        .if_dec_ready(if_dec_ready),
        // Next PC
        .ip_if_branch(ip_if_branch),
        .ip_if_branch_taken(ip_if_branch_taken),
        .ip_if_branch_pc(ip_if_branch_pc),
        .ip_if_branch_is_call(ip_if_branch_is_call),
        .ip_if_branch_is_ret(ip_if_branch_is_ret),
        .ip_if_branch_track(ip_if_branch_track),
        .if_pc_override(if_pc_override),
        .if_new_pc(if_new_pc)
    );

    // Decode stage
    <% gen_wire("dec1_ix", handshake(dec_instr_t)) %>
    <% gen_wire("dec0_ix", handshake(dec_instr_t)) %>
    dec dec(
        .clk(clk),
        .rst(rst),
        .pipe_flush(pipe_flush),
        <% gen_connect("if_dec1", if_dec_t) %>
        .if_dec1_valid(if_dec1_valid),
        <% gen_connect("if_dec0", if_dec_t) %>
        .if_dec0_valid(if_dec0_valid),
        .if_dec_ready(if_dec_ready),
        <% gen_connect("dec1_ix", handshake(dec_instr_t)) %>
        <% gen_connect("dec0_ix", handshake(dec_instr_t), last_comma=False) %>
    );

    // Issue and writeback stage
    <% gen_wire("ix_ip0", handshake(ix_ip_t)) %>
    <% gen_wire("ix_ip1", handshake(ix_ip_t)) %>
    wire [63:0] ip0_ix_forwarding;
    wire [63:0] ip1_ix_forwarding;
    <% gen_wire("ip0_wb", wb_t) %>
    <% gen_wire("ip1_wb", wb_t) %>
    <% gen_wire("ix_lsp", handshake(ix_lsp_t)) %>
    wire        lsp_ix_mem_busy;
    wire        lsp_ix_mem_wb_en;
    wire [4:0]  lsp_ix_mem_dst;
    wire        lsp_ix_mem_result_valid;
    wire [63:0] lsp_ix_mem_result;
    <% gen_wire("lsp_wb", wb_t) %>
    wire [63:0] lsp_wb_pc;
    wire        lsp_wb_ready;
    <% gen_wire("ix_md", handshake(ix_md_t)) %>
    wire [4:0]  md_ix_dst;
    wire        md_ix_active;
    <% gen_wire("ix_trap", handshake(ix_trap_t)) %>
    wire [15:0] trap_ix_ip;
    wire [63:0] wb_ix_buf_value;
    wire [4:0]  wb_ix_buf_dst;
    wire        wb_ix_buf_valid;
    wire        ix_mmu_tlb_flush_req;
    ix ix(
        .clk(clk),
        .rst(rst),
        .pipe_flush(pipe_flush),
        // Register file interface
        <% gen_connect("rf", rf_rd_t, count=REG_RD_PORTS) %>
        // IX interface
        <% gen_connect("dec0_ix", handshake(dec_instr_t)) %>
        <% gen_connect("dec1_ix", handshake(dec_instr_t)) %>
        // FU interfaces
        // To integer pipe
        <% gen_connect("ix_ip0", handshake(ix_ip_t)) %>
        // Hazard detection & Bypassing
        .ip0_ix_forwarding(ip0_ix_forwarding),
        <% gen_connect("ip0_wb", wb_t) %>
        // To integer pipe 1
        <% gen_connect("ix_ip1", handshake(ix_ip_t)) %>
        // Hazard detection & Bypassing
        .ip1_ix_forwarding(ip1_ix_forwarding),
        <% gen_connect("ip1_wb", wb_t) %>
        // To load/ store pipe
        <% gen_connect("ix_lsp", handshake(ix_lsp_t)) %>
        .lsp_unaligned_load(lsp_unaligned_load),
        .lsp_unaligned_store(lsp_unaligned_store),
        .lsp_unaligned_epc(lsp_unaligned_epc),
         // Hazard detection & Bypassing
        .lsp_ix_mem_busy(lsp_ix_mem_busy),
        .lsp_ix_mem_wb_en(lsp_ix_mem_wb_en),
        .lsp_ix_mem_dst(lsp_ix_mem_dst),
        .lsp_ix_mem_result(lsp_ix_mem_result),
        .lsp_ix_mem_result_valid(lsp_ix_mem_result_valid),
        <% gen_connect("lsp_wb", wb_t) %>
        // To muldiv unit
        <% gen_connect("ix_md", handshake(ix_md_t)) %>
        // Hazard detection
        .md_ix_dst(md_ix_dst),
        .md_ix_active(md_ix_active),
        // To trap unit
        <% gen_connect("ix_trap", handshake(ix_trap_t)) %>
        .trap_ix_ip(trap_ix_ip),
        // From WB unit
        .wb_ix_buf_value(wb_ix_buf_value),
        .wb_ix_buf_dst(wb_ix_buf_dst),
        .wb_ix_buf_valid(wb_ix_buf_valid),
        // MMU signals
        .mmu_load_page_fault(mmu_load_page_fault),
        .mmu_store_page_fault(mmu_store_page_fault),
        .mmu_fault_epc(ix_lsp_pc),
        .ix_mmu_tlb_flush_req(ix_mmu_tlb_flush_req),
        // Fence I
        .im_invalidate_req(im_invalidate_req),
        .im_invalidate_resp(im_invalidate_resp),
        .dm_flush_req(dm_flush_req),
        .dm_flush_resp(dm_flush_resp),
        .ix_if_pc_override(ix_if_pc_override),
        .ix_if_new_pc(ix_if_new_pc)
    );

    wire [63:0] ip0_wb_pc;
    wire ip0_wb_ready;
    wire ip0_wb_hipri;
    <% gen_wire("ip0_if", ip_if_t) %>
    ip #(.IP_HANDLE_BRANCH(1)) ip0(
        .clk(clk),
        .rst(rst),
        // From issue
        <% gen_connect("ix_ip", handshake(ix_ip_t), "ix_ip0") %>
        // Forwarding path back to issue
        .ip_ix_forwarding(ip0_ix_forwarding),
        // To writeback
        <% gen_connect("ip_wb", wb_t, "ip0_wb") %>
        .ip_wb_pc(ip0_wb_pc),
        .ip_wb_hipri(ip0_wb_hipri),
        .ip_wb_ready(ip0_wb_ready),
        // To instruction fetch unit
        <% gen_connect("ip_if", ip_if_t, "ip0_if") %>
        // Pipeline flush
        .ip_abort(pipe_flush)
    );

    wire [63:0] ip1_wb_pc;
    wire ip1_wb_ready;
    wire ip1_wb_hipri;
    <% gen_wire("ip1_if", ip_if_t) %>
    ip #(.IP_HANDLE_BRANCH(1)) ip1(
        .clk(clk),
        .rst(rst),
        // From issue
        <% gen_connect("ix_ip", handshake(ix_ip_t), "ix_ip1") %>
        // Forwarding path back to issue
        .ip_ix_forwarding(ip1_ix_forwarding),
        // To writeback
        <% gen_connect("ip_wb", wb_t, "ip1_wb") %>
        .ip_wb_pc(ip1_wb_pc),
        .ip_wb_hipri(ip1_wb_hipri),
        .ip_wb_ready(ip1_wb_ready),
        // To instruction fetch unit
        <% gen_connect("ip_if", ip_if_t, "ip1_if") %>
        // Pipeline flush
        .ip_abort(pipe_flush)
    );

    assign ip_if_pc_override = ip0_if_pc_override || ip1_if_pc_override;
    // Currently the pipeline only issue up to 1 branch instruction per cycle
    // A simple mux is good enough.
    assign ip_if_branch = ip0_if_branch || ip1_if_branch;
    assign ip_if_new_pc = ip0_if_branch ? ip0_if_new_pc : ip1_if_new_pc;
    assign ip_if_branch_taken =  ip0_if_branch ? (ip0_if_branch_taken) : (ip1_if_branch_taken);
    assign ip_if_branch_pc = ip0_if_branch ? (ip0_if_branch_pc) : (ip1_if_branch_pc);
    assign ip_if_branch_is_call =  ip0_if_branch ? (ip0_if_branch_is_call) : (ip1_if_branch_is_call);
    assign ip_if_branch_is_ret =  ip0_if_branch ? (ip0_if_branch_is_ret) : (ip1_if_branch_is_ret);
    assign ip_if_branch_track = ip0_if_branch ? (ip0_if_branch_track) : (ip1_if_branch_track);

    wire [63:0] lsp_req_addr;
    wire [63:0] lsp_req_wdata;
    wire [7:0]  lsp_req_wmask;
    wire        lsp_req_wen;
    wire        lsp_req_valid;
    wire        lsp_req_ready;
    wire [63:0] lsp_resp_rdata;
    wire        lsp_resp_valid;

    lsp lsp(
        .clk(clk),
        .rst(rst),
        // D-mem interface
        <% gen_connect("lsp_dm", rwmem_if_t, "lsp") %>
        // From decoder
        <% gen_connect("ix_lsp", handshake(ix_lsp_t)) %>
        // To issue for hazard detection
        .lsp_ix_mem_busy(lsp_ix_mem_busy),
        .lsp_ix_mem_wb_en(lsp_ix_mem_wb_en),
        .lsp_ix_mem_dst(lsp_ix_mem_dst),
        .lsp_ix_mem_result(lsp_ix_mem_result),
        .lsp_ix_mem_result_valid(lsp_ix_mem_result_valid),
        // To writeback
        <% gen_connect("lsp_wb", wb_t) %>
        .lsp_wb_pc(lsp_wb_pc),
        .lsp_wb_ready(lsp_wb_ready),
        // Abort the current AG stage request
        .ag_abort(pipe_flush),
        // Exception
        .lsp_unaligned_load(lsp_unaligned_load),
        .lsp_unaligned_store(lsp_unaligned_store),
        .lsp_unaligned_epc(lsp_unaligned_epc)
    );

    <% gen_wire("trap_wb", wb_t) %>
    wire [63:0] trap_wb_pc;
    wire trap_wb_ready;
    wire [2:0] wb_trap_instret;
    wire [63:0] trap_mmu_satp;
    wire [1:0] trap_mmu_mpp;
    trap #(.HARTID(HARTID)) trap(
        .clk(clk),
        .rst(rst),
        // External interrupt
        .extint_software(extint_software),
        .extint_timer(extint_timer),
        .extint_external(extint_external),
        // From issue
        <% gen_connect("ix_trap", handshake(ix_trap_t)) %>
        .trap_ix_ip(trap_ix_ip),
        // To writeback
        <% gen_connect("trap_wb", wb_t) %>
        .trap_wb_pc(trap_wb_pc),
        .trap_wb_ready(trap_wb_ready),
        // From writeback, for counting
        .wb_trap_instret(wb_trap_instret),
        // To MMU
        .trap_mmu_satp(trap_mmu_satp),
        .trap_mmu_mpp(trap_mmu_mpp),
        // To instruction fetch unit
        .trap_if_pc_override(trap_if_pc_override),
        .trap_if_new_pc(trap_if_new_pc)
    );

    <% gen_wire("md_wb", wb_t) %>
    wire [63:0] md_wb_pc;
    wire        md_wb_ready;
    `ifdef ENABLE_M_EXT
    md md(
        .clk(clk),
        .rst(rst),
        // To Issue
        <% gen_connect("ix_md", handshake(ix_md_t)) %>
        // Hazard detection
        .md_ix_dst(md_ix_dst),
        .md_ix_active(md_ix_active),
        // To writeback
        <% gen_connect("md_wb", wb_t) %>
        .md_wb_pc(md_wb_pc),
        .md_wb_ready(md_wb_ready),
        // This unit doesn't support stall
        .md_abort(pipe_flush)
    );
    `else
    assign ix_md_ready = 1'b0;
    assign md_ix_dst = 5'bx;
    assign md_ix_active = 1'b0;
    assign md_wb_dst = 5'bx;
    assign md_wb_result = 64'bx;
    assign md_wb_pc = 64'bx;
    assign md_wb_valid = 1'b0;
    `endif

    wb wb(
        .clk(clk),
        .rst(rst),
        // To register file
        <% gen_connect("rf", rf_wr_t, count=REG_WR_PORTS) %>
        // From integer pipe 0
        <% gen_connect("ip0_wb", wb_t) %>
        .ip0_wb_pc(ip0_wb_pc),
        .ip0_wb_hipri(ip0_wb_hipri),
        .ip0_wb_ready(ip0_wb_ready),
        // From integer pipe 1
        <% gen_connect("ip1_wb", wb_t) %>
        .ip1_wb_pc(ip1_wb_pc),
        .ip1_wb_hipri(ip1_wb_hipri),
        .ip1_wb_ready(ip1_wb_ready),
        // From load-store pipe
        <% gen_connect("lsp_wb", wb_t) %>
        .lsp_wb_pc(lsp_wb_pc),
        .lsp_wb_ready(lsp_wb_ready),
        // From muldiv unit
        <% gen_connect("md_wb", wb_t) %>
        .md_wb_pc(md_wb_pc),
        .md_wb_ready(md_wb_ready),
        // From trap unit
        <% gen_connect("trap_wb", wb_t) %>
        .trap_wb_pc(trap_wb_pc),
        .trap_wb_ready(trap_wb_ready),
        // To IX unit
        .wb_ix_buf_value(wb_ix_buf_value),
        .wb_ix_buf_dst(wb_ix_buf_dst),
        .wb_ix_buf_valid(wb_ix_buf_valid),
        // To trap unit
        .wb_trap_instret(wb_trap_instret)
    );

    // MMU
    mmu mmu(
        .clk(clk),
        .rst(rst),
        // CSR settings
        .mpp(trap_mmu_mpp),
        .satp(trap_mmu_satp),
        .tlb_invalidate_req(ix_mmu_tlb_flush_req),
        // Fault
        .mmu_load_page_fault(mmu_load_page_fault),
        .mmu_store_page_fault(mmu_store_page_fault),
        // Instruction memory interface
        <% gen_connect("if", romem_if_t) %>
        .if_resp_page_fault(if_resp_page_fault),
        <% gen_connect("im", romem_if_t) %>
        // Data memory interface
        <% gen_connect("lsp", rwmem_if_t) %>
        <% gen_connect("dm", rwmem_if_t, last_comma=False) %>
    );

endmodule
